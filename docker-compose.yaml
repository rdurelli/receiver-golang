# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  terraform:
    build:
      context: terraform
    networks:
      - backend
    environment:
      - AWS_ENDPOINT_URL=http://localstack:4566
      - S3_HOSTNAME=localstack
  localstack:
    # container_name: "${LOCALSTACK_DOCKER_NAME:-localstack-main}"
    image: localstack/localstack
    ports:
      - "127.0.0.1:4566:4566" # LocalStack Gateway
      - "127.0.0.1:4510-4559:4510-4559" # external services port range
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
      - DEBUG=${DEBUG:-0}
    volumes:
      # - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - backend
  loki:
    image: grafana/loki:2.9.4
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - backend
  promtail:
    image: grafana/promtail:2.9.4
    volumes:
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml
    networks:
      - backend
  prometheus:
    image: prom/prometheus
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
      - "./rules.yml:/etc/prometheus/rules.yml"
    networks:
      - backend
    ports:
      - 9091:9090
  alertmanager:
    image: prom/alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - "./alertmanager:/config"
      - alertmanager-data:/data
    command: --config.file=/config/alertmanager.yml --log.level=debug
    networks:
      - backend
  grafana:
    depends_on:
      - prometheus
    image: grafana/grafana:10.1.9
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: test
      GF_PATHS_PROVISIONING: '/app.cfg/provisioning'
    volumes:
      - ./config/grafana:/app.cfg
      - ./config/grafana-data:/var/lib/grafana
      - ./config/grafana-config:/etc/grafana
      - ./config/dashboards:/var/lib/grafana/dashboards
    networks:
      - backend
  kraend-api-gateway:
    container_name: kraend-api-gateway
    build:
      dockerfile: Dockerfile-krakend
    ports:
      - 8080:8080
      - 9090:9090
    networks:
      - backend
  golang-receiver:
    container_name: golang-receiver
    build:
      context: .
      target: final
    environment:
      - KEYCLOAK_REALM=example-realm
      - KEYCLOAK_CLIENT_ID=test-client
      - KEYCLOAK_CLIENT_SECRET=AtU3FL4NDhfqiptgCZbwl9TkbK2s955S
      - SERVER_PORT=3000
      - DB_USER=pg
      - DB_PASSWORD=pass
      - DB_NAME=crud
      - DB_HOST=database
      - DB_PORT=5432
      - AWS_ACCESS_KEY_ID=foo
      - AWS_SECRET_ACCESS_KEY=bar
      - AWS_REGION=us-east-1
      - AWS_ENDPOINT_URL=http://localstack:4566
      - S3_FORCE_PATH_STYLE=true
      - AWS_BUCKET=bucket1
      - AWS_SQS_URL=https://localhost.localstack.cloud:4566/000000000000/queue1
    ports:
      - 3000:3000
    depends_on: [database]
    networks:
      - backend
  database:
    container_name: database
    image: postgres:12.8
    restart: always
    environment:
      - POSTGRES_USER=pg
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=crud
    ports:
      - 5432:5432
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - backend
  auth:
    image: quay.io/keycloak/keycloak:23.0.3
    ports:
      - "8000:8080"
    environment:
        KEYCLOAK_ADMIN: admin
        KEYCLOAK_ADMIN_PASSWORD: admin
        KC_DB: postgres
        KC_DB_URL: jdbc:postgresql://database/crud
        KC_DB_USERNAME: pg
        KC_DB_PASSWORD: pass
    depends_on:
      - database
    command:
      - start-dev
    volumes:
      - ./auth/import:/opt/keycloak/data/import
    networks:
      - backend
volumes:
  db:
  alertmanager-data:
networks:
  backend:
  localstack: